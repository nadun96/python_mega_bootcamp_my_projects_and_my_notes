Deploy

pip install streamlit
pip freeze > requirements.txt
pip freeze

publish to github

[CMD] 
streamlit run app.py
Right Upper corner menu icon

[SELECT] 
deploy app 

-----------------------------

Coding Exercise 1
Your task for this exercise is to add a new feature to the webcam Streamlit app we built in today's bonus example video. If you don't have the code of the bonus example video, here it is:

# Note: This script runs only on a local IDE with "streamlit run main.py"
import streamlit as st
from PIL import Image
 
st.subheader("Color to Grayscale Converter")
 
with st.expander("Start camera"):
    camera_image = st.camera_input("Camera")
 
if camera_image:
    img = Image.open(camera_image)
    gray_camera_img = img.convert('L')
    st.image(gray_camera_img)
You need to add a feature to that program that allows users to upload an image from their computer files. Then, the app converts the uploaded image to grayscale and displays it.

Hint: You can use uploaded_image = st.file_uploader("Upload Image") to create a "Browse File" component.

The end product should be as shown in the screenshot down below.

Day 19, Coding Exercise 1
Solution

main.py

# Note: This script runs only on a local IDE with "streamlit run main.py"
import streamlit as st
from PIL import Image

st.subheader("Color to Grayscale Converter")

# Create a file uploader component allowing the user to upload a file
uploaded_image = st.file_uploader("Upload Image")

with st.expander("Start camera"):
    camera_image = st.camera_input("Camera")

if camera_image:
    # Supply camera_image to convert_image to get the grayscale version
    img = Image.open(camera_image)
    gray_camera_img = img.convert('L')
    st.image(gray_camera_img)

# Check if the image exists meaning the user has uploaded a file
if uploaded_image:
    # Open the user uploaded image with PIL
    img = Image.open(uploaded_image)
    # Convert the image to grayscale
    gray_uploaded_img = img.convert('L')
    # Display the grayscale image on the webpage
    st.image(gray_uploaded_img)


-----------------------------

Heroku PaaS


FAQ
Q1: I get a numpy error when I try to install streamlit.

A: Open the PyCharm Terminal and execute these commands one by one:

pip uninstall numpy

pip install numpy==1.21.1

Then, close the terminal, open it again, and try to start the streamlit app again:

streamlit run main.py.

Your streamlit app should now run normally.



Q2. I always thought that in order to code a website, one needs to use HTML. So how comes we did not use any HTML in our app?

A: It is true that every webpage is built on top of HTML code. However, in our case, Streamlit prepares the HTML code from the Python code we wrote in the web.py file and renders that HTML in the browser. In other words, Streamlit acts as a converter tool that converts Python to HTML.



Q3: Are there alternatives to Streamlit for building websites with Python?

A: Yes. Streamlit is one of the Python web frameworks. Other popular frameworks are Flask and Django. You will learn Flask and Django in this course.



Q4 Which is the best web framework for Python?

A: There is no "best" framework. As a programmer, you should choose the best framework that suits your use case. For example, Streamlit has the advantage that it is easier to use but has limitations. That makes Streamlit an ideal choice for small apps. On the other hand, Flask is an excellent choice for medium apps, and Django is considered the best for building larger web apps such as news websites, e-learning platforms, etc.



Q5: We are creating a virtual environment and installing packages every time we create a new PyCharm project, but my computer disk space is low. Is there a way to save disk space?

A: It is a good practice to create a virtual environment for every project, but it is not a must. If you have low hard disk space, you can tell PyCharm to use the global Python interpreter whenever you create a new project. That way, you will not need to reinstall packages for every project since every project will use the same global interpreter.

To make PyCharm use the Python global interpreter, follow these steps:

1. When you are creating a PyCharm project, select the Previously configured interpreter option and click on Add Interpreter and then on Add Local Interpreter...




2. In the next window, select System Interpreter and then select one of the global interpreters (e.g., Python 3.11) you have installed. Press OK to finish and continue with the next project creation steps as normal.


