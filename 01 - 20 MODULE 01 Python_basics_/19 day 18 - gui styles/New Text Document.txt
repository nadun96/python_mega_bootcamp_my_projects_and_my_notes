Coding Exercise 1
Your task for this exercise is to add an Exit button that quits the program and apply a black theme to the program you built-in yesterday's coding exercise.


Solution

Day 18, Coding Exercise 1
Solution

main.py

# NOTE: This script runs only on your local IDE
import PySimpleGUI as sg
from converters import convert

sg.theme("Black")

feet_label = sg.Text("Enter feet: ")
feet_input = sg.Input(key="feet")

inches_label = sg.Text("Enter inches: ")
inches_input = sg.Input(key="inches")

button = sg.Button("Convert")
output_label = sg.Text("", key="output")
exit_button = sg.Button("Exit")

window = sg.Window("Convertor",
                   layout=[[feet_label, feet_input],
                           [inches_label, inches_input],
                           [button, exit_button, output_label]])

while True:
    event, values = window.read()
    match event:
        case "Exit":
            break
        case sg.WIN_CLOSED:
            break
    feet = float(values["feet"])
    inches = float(values["inches"])

    result = convert(feet, inches)
    window["output"].update(value=f"{result} m", text_color="white")


window.close()


converters.py

def convert(feet, inches):
    meters = feet * 0.3048 + inches * 0.0254
    return meters

Bug-Fixing Exercise
Bug Fixing Exercise 1
The following program (which we developed in today's coding exercise) ends with an error if the user presses the Convert button without supplying any values in the input boxes first. 

import PySimpleGUI as sg
 
def convert(feet, inches):
    meters = feet * 0.3048 + inches * 0.0254
    return meters
 
 
sg.theme("Black")
 
feet_label = sg.Text("Enter feet: ")
feet_input = sg.Input(key="feet")
 
inches_label = sg.Text("Enter inches: ")
inches_input = sg.Input(key="inches")
 
button = sg.Button("Convert")
output_label = sg.Text("", key="output")
exit_button = sg.Button("Exit")
 
window = sg.Window("Convertor",
                   layout=[[feet_label, feet_input],
                           [inches_label, inches_input],
                           [button, exit_button, output_label]])
 
while True:
    event, values = window.read()
    match event:
        case "Exit":
            break
        case sg.WIN_CLOSED:
            break
    feet = float(values["feet"])
    inches = float(values["inches"])
    result = convert(feet, inches)
    window["output"].update(value=f"{result} m", text_color="white")
 
 
window.close()
------------------------------------------------------------

Please modify the above program so that instead of ending, the program should show a popup window telling the user to enter numbers in the input boxes. In other words, the program should behave as depicted below:


Solution

Day 18, Bug Fixing Exercise 1
Explanation

Lines 32-35 were

    feet = float(values["feet"])

    inches = float(values["inches"])

    result = convert(feet, inches)

    window["output"].update(value=f"{result} m", text_color="white") 

but they should be

     try:

        feet = float(values["feet"])

        inches = float(values["inches"])

        result = convert(feet, inches)

        window["output"].update(value=f"{result} m", text_color="white")

    except ValueError:

        sg.popup("Please provide two numbers.", font=("Helvetica", 20))

We use an exception block here to display a popup window if a value error occurs.

main.py

import PySimpleGUI as sg

def convert(feet, inches):
    meters = feet * 0.3048 + inches * 0.0254
    return meters


sg.theme("Black")

feet_label = sg.Text("Enter feet: ")
feet_input = sg.Input(key="feet")

inches_label = sg.Text("Enter inches: ")
inches_input = sg.Input(key="inches")

button = sg.Button("Convert")
output_label = sg.Text("", key="output")
exit_button = sg.Button("Exit")

window = sg.Window("Convertor",
                   layout=[[feet_label, feet_input],
                           [inches_label, inches_input],
                           [button, exit_button, output_label]])

while True:
    event, values = window.read()
    match event:
        case "Exit":
            break
        case sg.WIN_CLOSED:
            break
    try:
        feet = float(values["feet"])
        inches = float(values["inches"])
        result = convert(feet, inches)
        window["output"].update(value=f"{result} m", text_color="white")
    except ValueError:
        sg.popup("Please provide two numbers.", font=("Helvetica", 20))


window.close()

main_with_bug.py

import PySimpleGUI as sg

def convert(feet, inches):
    meters = feet * 0.3048 + inches * 0.0254
    return meters


sg.theme("Black")

feet_label = sg.Text("Enter feet: ")
feet_input = sg.Input(key="feet")

inches_label = sg.Text("Enter inches: ")
inches_input = sg.Input(key="inches")

button = sg.Button("Convert")
output_label = sg.Text("", key="output")
exit_button = sg.Button("Exit")

window = sg.Window("Convertor",
                   layout=[[feet_label, feet_input],
                           [inches_label, inches_input],
                           [button, exit_button, output_label]])

while True:
    event, values = window.read()
    match event:
        case "Exit":
            break
        case sg.WIN_CLOSED:
            break
    feet = float(values["feet"])
    inches = float(values["inches"])
    result = convert(feet, inches)
    window["output"].update(value=f"{result} m", text_color="white")


window.close()

---------------------------------


convert python script to standalone program

cmds->
windows

pip install pyinastaller
pyinstaller --onefile --windowed --clean bonus16.py


mac-> 
platypus

-----------------------------------------

FAQ
Q1: Sometimes, the widgets are not so well aligned. For example, the GUI below doesn't look so good. How can we better align widgets?


A: The widgets above do not align well because the two labels on the left have different lengths. That can be avoided by using columns. Here is a code sample:

import PySimpleGUI as sg
# from zip_extractor import extract_archive
 
sg.theme("Black")
 
label1 = sg.Text("Select archive:")
input1 = sg.Input()
choose_button1 = sg.FileBrowse("Choose", key="archive")
 
label2 = sg.Text("Select destination directory:")
input2 = sg.Input()
choose_button2 = sg.FolderBrowse("Choose", key="folder")
 
extract_button = sg.Button("Extract")
output_label = sg.Text(key="output", text_color="green")
 
col1 = sg.Column([[label1], [label2]])
col2 = sg.Column([[input1], [input2]])
col3 = sg.Column([[choose_button1], [choose_button2]])
 
window = sg.Window("Archive Extractor",
                   layout=[[col1, col2, col3], [extract_button]])
while True:
    event, values = window.read()
    print(event, values)
    archivepath = values["archive"]
    dest_dir = values["folder"]
    extract_archive(archivepath, dest_dir)
    window["output"].update(value="Extraction Completed!")
 
window.close()
That would produce this output:


As you can see, the widgets are well aligned now. All we did to achieve that was put the widgets inside Column widgets using these lines:

col1 = sg.Column([[label1], [label2]])
col2 = sg.Column([[input1], [input2]])
col3 = sg.Column([[choose_button1], [choose_button2]])
Then, we use supplied those column widgets to layout:

layout=[[col1, col2, col3], [extract_button]]

---------------------------


